{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"Create everything to start a aws ecs stack",
   "Parameters":{
      "KeyName":{
         "Description":"Name of an existing EC2 KeyPair for SSH access to the instances.",
         "Type":"AWS::EC2::KeyPair::KeyName"
      },
      "ECSRepoName":{
         "Type":"String",
         "Description":"The name of the Dockerhub Repo"
      },
	  "ClusterName":{
         "Type":"String",
         "Description":"The name Cluster",
		 "Default":"ecs-cluster"
      },
      "ImageTag":{
         "Type":"String",
         "Description":"The version of the image tag",
         "Default":"latest"
      },
	  "HostPort":{
         "Type":"Number",
         "Default":"8888",
         "Description":"The host port which will be mapped to the container port"
      },
	  "ContainerPort":{
         "Type":"Number",
         "Default":"8080",
         "Description":"The exposed container port."
      },
	  "ContainerName":{
		 "Type":"String",
         "Description":"The name of the container which will start",
		 "Default":"demo-container" 
	  },
	  "AppContext":{
         "Type":"String",
         "Description":"The application context, will be used to create the app url in output.",
		 "Default":"simplewebapp"
      },
      "DesiredCapacity":{
         "Type":"Number",
         "Default":"2",
         "Description":"Desired capacity of autoscaling group instances."
      },
	  "DesiredCount":{
         "Type":"Number",
         "Default":"2",
         "Description":"Number of tasks to run in your ECS cluster"
      },
      "MaxSize":{
         "Type":"Number",
         "Default":"2",
         "Description":"Maximum number of instances that can be launched in your ECS cluster"
      },
	  "MaxPercent":{
         "Type":"Number",
         "Default":"200",
         "Description":"The maximum percent parameter represents an upper limit on the number of your service's tasks that are allowed in the RUNNING or PENDING state during a deployment, as a percentage of the desired number of tasks (rounded down to the nearest integer)"
      },
	  "MinHealthyPercent":{
         "Type":"Number",
         "Default":"50",
         "Description":"minimum healthy percent represents a lower limit on the number of your service's tasks that must remain in the RUNNING state during a deployment"
      },
      "InstanceType":{
         "Description":"The EC2 instance type",
         "Type":"String",
         "Default":"t2.micro",
         "AllowedValues":[
            "t2.micro",
            "t2.small",
            "t2.medium",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "cr1.8xlarge",
            "cc2.8xlarge"
         ],
         "ConstraintDescription":"must be a valid EC2 instance type."
      }
   },
   "Metadata":{
      "AWS::CloudFormation::Interface":{
         "ParameterGroups":[
            {
               "Label":{
                  "default":"Dynamic Configuration"
               },
               "Parameters":[
                  "KeyName"
               ]
            },
            {
               "Label":{
                  "default":"ECS Configuration"
               },
               "Parameters":[
                  "ECSRepoName",
                  "DesiredCount",
                  "ImageTag",
                  "MaxSize"
               ]
            }
         ]
      }
   },
   "Mappings":{
      "VPCIpSpace":{
         "us-east-1":{
            "RANGE":"10.0"
         },
         "us-west-2":{
            "RANGE":"10.43"
         }
      },
      "SubnetTypeIpRanges":{
         "public":{
            "RANGE":"0.0/17"
         }
      },
      "publicSubnetConfig":{
         "publicSubnet01":{
            "CIDR":"10.0/24"
         },
         "publicSubnet02":{
            "CIDR":"2.0/24"
         }
      },
      "instancesTypes":{
         "Demo":{
            "INST":"t2.small"
         }
      },
      "AWSInstanceType2Virt":{
         "t2.micro":{
            "Virt":"HVM"
         },
         "t2.small":{
            "Virt":"HVM"
         },
         "t2.medium":{
            "Virt":"HVM"
         },
         "t2.large":{
            "Virt":"HVM"
         }
      },
      "AWSInstanceType2EBSOpt":{
         "t2.micro":{
            "EBSOpt":"false"
         },
         "t2.small":{
            "EBSOpt":"false"
         },
         "t2.medium":{
            "EBSOpt":"false"
         },
         "t2.large":{
            "EBSOpt":"false"
         }
      },
      "AWSRegionVirt2AMI":{
         "us-east-1":{
            "HVM":"ami-8fcee4e5"
         },
         "us-west-2":{
            "HVM":"ami-63b25203"
         }
      },
      "AWSRegionToAMI":{
         "us-east-1":{
            "AMIID":"ami-2b3b6041"
         },
         "us-west-2":{
            "AMIID":"ami-ac6872cd"
         },
         "eu-west-1":{
            "AMIID":"ami-03238b70"
         },
         "ap-northeast-1":{
            "AMIID":"ami-fb2f1295"
         },
         "ap-southeast-2":{
            "AMIID":"ami-43547120"
         },
         "us-west-1":{
            "AMIID":"ami-bfe095df"
         },
         "ap-southeast-1":{
            "AMIID":"ami-c78f43a4"
         },
         "eu-central-1":{
            "AMIID":"ami-e1e6f88d"
         }
      }
   },
   "Resources":{
      "MyVPC":{
         "Type":"AWS::EC2::VPC",
         "Properties":{
            "CidrBlock":{
               "Fn::Join":[
                  "",
                  [
                     {
                        "Fn::FindInMap":[
                           "VPCIpSpace",
                           {
                              "Ref":"AWS::Region"
                           },
                           "RANGE"
                        ]
                     },
                     ".",
                     "0.0/16"
                  ]
               ]
            },
            "EnableDnsSupport":"true",
            "EnableDnsHostnames":"true",
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "",
                        [
                           {
                              "Ref":"AWS::StackName"
                           },
                           "-VPC"
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "publicSubnet01":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"MyVPC"
            },
            "MapPublicIpOnLaunch":"true",
            "CidrBlock":{
               "Fn::Join":[
                  "",
                  [
                     {
                        "Fn::FindInMap":[
                           "VPCIpSpace",
                           {
                              "Ref":"AWS::Region"
                           },
                           "RANGE"
                        ]
                     },
                     ".",
                     {
                        "Fn::FindInMap":[
                           "publicSubnetConfig",
                           "publicSubnet01",
                           "CIDR"
                        ]
                     }
                  ]
               ]
            },
            "AvailabilityZone":{
               "Fn::Select":[
                  "0",
                  {
                     "Fn::GetAZs":{
                        "Ref":"AWS::Region"
                     }
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"SubnetType",
                  "Value":"Public"
               },
               {
                  "Key":"Name",
                  "Value":"publicSubnet01"
               }
            ]
         }
      },
      "publicSubnet02":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"MyVPC"
            },
            "MapPublicIpOnLaunch":"true",
            "CidrBlock":{
               "Fn::Join":[
                  "",
                  [
                     {
                        "Fn::FindInMap":[
                           "VPCIpSpace",
                           {
                              "Ref":"AWS::Region"
                           },
                           "RANGE"
                        ]
                     },
                     ".",
                     {
                        "Fn::FindInMap":[
                           "publicSubnetConfig",
                           "publicSubnet02",
                           "CIDR"
                        ]
                     }
                  ]
               ]
            },
            "AvailabilityZone":{
               "Fn::Select":[
                  "1",
                  {
                     "Fn::GetAZs":{
                        "Ref":"AWS::Region"
                     }
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"SubnetType",
                  "Value":"Public"
               },
               {
                  "Key":"Name",
                  "Value":"publicSubnet02"
               }
            ]
         }
      },
      "InternetGateway":{
         "Type":"AWS::EC2::InternetGateway",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"DemoVPCIGW"
               }
            ]
         }
      },
      "AttachGateway":{
         "Type":"AWS::EC2::VPCGatewayAttachment",
         "Properties":{
            "VpcId":{
               "Ref":"MyVPC"
            },
            "InternetGatewayId":{
               "Ref":"InternetGateway"
            }
         }
      },
      "PublicRouteTable":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"MyVPC"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"PublicRouteTable"
               }
            ]
         }
      },
      "PublicRoute":{
         "Type":"AWS::EC2::Route",
         "Properties":{
            "RouteTableId":{
               "Ref":"PublicRouteTable"
            },
            "DestinationCidrBlock":"0.0.0.0/0",
            "GatewayId":{
               "Ref":"InternetGateway"
            }
         }
      },
      "PublicSubnetRTAssociation01":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"publicSubnet01"
            },
            "RouteTableId":{
               "Ref":"PublicRouteTable"
            }
         }
      },
      "PublicSubnetRTAssociation02":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"publicSubnet02"
            },
            "RouteTableId":{
               "Ref":"PublicRouteTable"
            }
         }
      },
      "PublicNetworkAcl":{
         "Type":"AWS::EC2::NetworkAcl",
         "Properties":{
            "VpcId":{
               "Ref":"MyVPC"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"NetworkAcl"
               }
            ]
         }
      },
      "InboundPublicNAclEntry":{
         "Type":"AWS::EC2::NetworkAclEntry",
         "Properties":{
            "NetworkAclId":{
               "Ref":"PublicNetworkAcl"
            },
            "RuleNumber":"2000",
            "Protocol":"-1",
            "RuleAction":"allow",
            "Egress":"false",
            "CidrBlock":"0.0.0.0/0",
            "PortRange":{
               "From":"0",
               "To":"65535"
            }
         }
      },
      "OutboundPublicNetworkAclEntry":{
         "Type":"AWS::EC2::NetworkAclEntry",
         "Properties":{
            "NetworkAclId":{
               "Ref":"PublicNetworkAcl"
            },
            "RuleNumber":"2000",
            "Protocol":"-1",
            "RuleAction":"allow",
            "Egress":"true",
            "CidrBlock":"0.0.0.0/0",
            "PortRange":{
               "From":"0",
               "To":"65535"
            }
         }
      },
      "publicSubnetNetworkAclAssociation01":{
         "Type":"AWS::EC2::SubnetNetworkAclAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"publicSubnet01"
            },
            "NetworkAclId":{
               "Ref":"PublicNetworkAcl"
            }
         }
      },
      "publicSubnetNetworkAclAssociation02":{
         "Type":"AWS::EC2::SubnetNetworkAclAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"publicSubnet02"
            },
            "NetworkAclId":{
               "Ref":"PublicNetworkAcl"
            }
         }
      },
      "SourceSG":{
         "Type":"AWS::EC2::SecurityGroup",
         "DependsOn":[
            "MyVPC"
         ],
         "Properties":{
            "VpcId":{
               "Ref":"MyVPC"
            },
            "GroupDescription":"Sample source security group",
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":"0.0.0.0/0"
               }
            ],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "",
                        [
                           {
                              "Ref":"AWS::StackName"
                           },
                           "-SourceSG"
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "TargetSG":{
         "Type":"AWS::EC2::SecurityGroup",
         "DependsOn":[
            "MyVPC"
         ],
         "Properties":{
            "VpcId":{
               "Ref":"MyVPC"
            },
            "GroupDescription":"ALL Inbound TCP - Source Restricted to SourceSG",
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":"0",
                  "ToPort":"65535",
                  "CidrIp":"0.0.0.0/0"
               }
            ],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "",
                        [
                           {
                              "Ref":"AWS::StackName"
                           },
                           "-TargetSG"
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "OutboundRule":{
         "Type":"AWS::EC2::SecurityGroupEgress",
         "DependsOn":[
            "MyVPC"
         ],
         "Properties":{
            "IpProtocol":"tcp",
            "FromPort":"0",
            "ToPort":"65535",
            "DestinationSecurityGroupId":{
               "Fn::GetAtt":[
                  "TargetSG",
                  "GroupId"
               ]
            },
            "GroupId":{
               "Fn::GetAtt":[
                  "SourceSG",
                  "GroupId"
               ]
            }
         }
      },
      "InboundRule":{
         "Type":"AWS::EC2::SecurityGroupIngress",
         "DependsOn":[
            "MyVPC"
         ],
         "Properties":{
            "IpProtocol":"tcp",
            "FromPort":"0",
            "ToPort":"65535",
            "SourceSecurityGroupId":{
               "Fn::GetAtt":[
                  "TargetSG",
                  "GroupId"
               ]
            },
            "GroupId":{
               "Fn::GetAtt":[
                  "TargetSG",
                  "GroupId"
               ]
            }
         }
      },
      "EcsCluster":{
         "Type":"AWS::ECS::Cluster",
         "DependsOn":[
            "MyVPC"
         ],
		 "Properties" : {
		    "ClusterName":{
		       "Ref":"ClusterName"
		    }
		 }
      },
      "TomcatTaskDefinition":{
         "Type":"AWS::ECS::TaskDefinition",
         "DependsOn":[
            "MyVPC"
         ],
         "Properties":{
		    "Family":{
			  "Fn::Join":[
				"",
				[
				  {
					"Ref":"AWS::StackName"
				  },
				  "-ecs-demo-app"
				]
			  ]
			},
            "ContainerDefinitions":[
               {
                  "Name":{
				     "Ref":"ContainerName"
				  },
                  "Cpu":"1",
                  "Essential":"true",
                  "Image":{
                     "Fn::Join":[
                        "",
                        [
                           {
                               "Ref":"ECSRepoName"
                           },
						   ":",
                           {
                              "Ref":"ImageTag"
                           }
                        ]
                     ]
                  },
                  "Memory":"300",
                  "PortMappings":[
                     {
                        "HostPort":{
						   "Ref":"HostPort"
						},
                        "ContainerPort":{
							"Ref":"ContainerPort"
						}
                     }
                  ]
               }
            ]
         }
      },
      "EcsElb":{
         "Type":"AWS::ElasticLoadBalancing::LoadBalancer",
         "DependsOn":[
            "MyVPC"
         ],
         "Properties":{
            "Subnets":[
               {
                  "Ref":"publicSubnet01"
               },
               {
                  "Ref":"publicSubnet02"
               }
            ],
            "Listeners":[
               {
                  "LoadBalancerPort":{
					 "Ref":"HostPort"
				  },
                  "InstancePort":{
					 "Ref":"HostPort"
				  },
                  "Protocol":"HTTP"
               }
            ],
            "SecurityGroups":[
               {
                  "Ref":"SourceSG"
               },
               {
                  "Ref":"TargetSG"
               }
            ],
            "HealthCheck":{
               "Target":{
				  "Fn::Join":[
					 "",
					 [
						"HTTP:",
					    {
						   "Ref":"HostPort"
					    },
					    "/"
					 ]
				  ]
			   },
               "HealthyThreshold":"2",
               "UnhealthyThreshold":"10",
               "Interval":"30",
               "Timeout":"5"
            }
         }
      },
      "ECSAutoScalingGroup":{
         "Type":"AWS::AutoScaling::AutoScalingGroup",
         "DependsOn":[
            "MyVPC"
         ],
         "Properties":{
            "VPCZoneIdentifier":[
               {
                  "Ref":"publicSubnet01"
               },
               {
                  "Ref":"publicSubnet02"
               }
            ],
            "LaunchConfigurationName":{
               "Ref":"ContainerInstances"
            },
            "MinSize":"1",
            "MaxSize":{
               "Ref":"MaxSize"
            },
            "DesiredCapacity":{
               "Ref":"DesiredCapacity"
            }
         },
         "CreationPolicy":{
            "ResourceSignal":{
               "Timeout":"PT15M"
            }
         },
         "UpdatePolicy":{
            "AutoScalingRollingUpdate":{
               "MinInstancesInService":{
				   "Ref":"DesiredCapacity"
				},
               "MaxBatchSize":"1",
               "PauseTime":"PT5M",
               "WaitOnResourceSignals":"true"
            }
         }
      },
      "ContainerInstances":{
         "Type":"AWS::AutoScaling::LaunchConfiguration",
         "DependsOn":[
            "MyVPC"
         ],
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "config":{
                  "commands":{
                     "01_add_instance_to_cluster":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "#!/bin/bash\n",
                                 "echo ECS_CLUSTER=",
                                 {
                                    "Ref":"EcsCluster"
                                 },
                                 " >> /etc/ecs/ecs.config"
                              ]
                           ]
                        }
                     }
                  },
                  "files":{
                     "/etc/cfn/cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000400",
                        "owner":"root",
                        "group":"root"
                     },
                     "/etc/cfn/hooks.d/cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
                                 "action=/opt/aws/bin/cfn-init -v ",
                                 "         --stack ",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 "         --resource ContainerInstances ",
                                 "         --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n",
                                 "runas=root\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "sysvinit":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "/etc/cfn/cfn-hup.conf",
                              "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               }
            }
         },
         "Properties":{
            "ImageId":{
               "Fn::FindInMap":[
                  "AWSRegionToAMI",
                  {
                     "Ref":"AWS::Region"
                  },
                  "AMIID"
               ]
            },
            "SecurityGroups":[
               {
                  "Ref":"SourceSG"
               },
               {
                  "Ref":"TargetSG"
               }
            ],
            "InstanceType":{
               "Ref":"InstanceType"
            },
            "IamInstanceProfile":{
               "Ref":"EC2InstanceProfile"
            },
            "KeyName":{
               "Ref":"KeyName"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "#!/bin/bash -xe\n",
                        "yum install -y aws-cfn-bootstrap\n",
                        "/opt/aws/bin/cfn-init -v ",
                        "         --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        "         --resource ContainerInstances ",
                        "         --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "/opt/aws/bin/cfn-signal -e $? ",
                        "         --stack ",
                        {
                           "Ref":"AWS::StackName"
                        },
                        "         --resource ECSAutoScalingGroup ",
                        "         --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n"
                     ]
                  ]
               }
            }
         }
      },
      "EcsService":{
         "Type":"AWS::ECS::Service",
         "DependsOn":[
            "MyVPC",
            "ECSAutoScalingGroup"
         ],
         "Properties":{
            "Cluster":{
               "Ref":"EcsCluster"
            },
            "DesiredCount":{
               "Ref":"DesiredCount"
            },
            "DeploymentConfiguration":{
               "MaximumPercent":{
				   "Ref":"MaxPercent"
			   },
               "MinimumHealthyPercent":{
				   "Ref":"MinHealthyPercent"
			   }
            },
            "LoadBalancers":[
               {
                  "ContainerName":{
				     "Ref":"ContainerName"
				  },
                  "ContainerPort":{
					 "Ref":"ContainerPort"
				  },
                  "LoadBalancerName":{
                     "Ref":"EcsElb"
                  }
               }
            ],
            "Role":{
               "Ref":"EcsServiceRole"
            },
            "TaskDefinition":{
               "Ref":"TomcatTaskDefinition"
            }
         }
      },
      "EcsServiceRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "ecs.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/",
            "Policies":[
               {
                  "PolicyName":"ecs-service",
                  "PolicyDocument":{
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":[
                              "elasticloadbalancing:Describe*",
                              "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                              "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                              "ec2:Describe*",
                              "ec2:AuthorizeSecurityGroupIngress"
                           ],
                           "Resource":"*"
                        }
                     ]
                  }
               }
            ]
         }
      },
      "EC2Role":{
         "Type":"AWS::IAM::Role",
         "DependsOn":[
            "MyVPC"
         ],
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/",
            "Policies":[
               {
                  "PolicyName":"ecs-service",
                  "PolicyDocument":{
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "Action":[
                              "ecs:CreateCluster",
                              "ecs:RegisterContainerInstance",
                              "ecs:DeregisterContainerInstance",
                              "ecs:DiscoverPollEndpoint",
                              "ecs:Submit*",
                              "ecr:*",
                              "ecs:Poll"
                           ],
                           "Resource":"*"
                        }
                     ]
                  }
               }
            ]
         }
      },
      "EC2InstanceProfile":{
         "Type":"AWS::IAM::InstanceProfile",
         "DependsOn":[
            "MyVPC"
         ],
         "Properties":{
            "Path":"/",
            "Roles":[
               {
                  "Ref":"EC2Role"
               }
            ]
         }
      }
   },
   "Outputs":{
      "AppURL":{
         "Value":{
            "Fn::Join":[
               "",
               [
                  "http://",
                  {
                     "Fn::GetAtt":[
                        "EcsElb",
                        "DNSName"
                     ]
                  },
                  ":",
				  {
				     "Ref":"HostPort"
				  },
				  "/",
				  {
				     "Ref":"AppContext"
				  }
               ]
            ]
         },
         "Description":"URL to the working application running on ECS"
      },
      "VpcId":{
         "Value":{
            "Ref":"MyVPC"
         },
         "Description":"VPC ID of newly created VPC"
      },
      "IGWId":{
         "Value":{
            "Ref":"InternetGateway"
         },
         "Description":"Internet Gateway ID"
      },
      "PublicSubnetA":{
         "Value":{
            "Ref":"publicSubnet01"
         },
         "Description":"Public Subnet in AZ A"
      }
   }
}